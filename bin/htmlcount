#!/usr/bin/env python3

# Copyright (c) 2014 Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

'''
Simple script draft for counting HTML/XML tags and showing locations of
unbalanced start and end tags. Pass a valid url as argument and it will
fetch its contents. Use without arguments to parse from stdin.

'''

import fileinput
import sys
from html.parser import HTMLParser
from urllib.request import FancyURLopener


class Parser(HTMLParser):
    tags = {}

    def handle_starttag(self, tag, attrs):
        if tag not in self.tags:
            self.tags[tag] = {'start': [], 'end': []}
        self.tags[tag]['start'].append(self.getpos())

    def handle_endtag(self, tag):
        self.tags[tag]['end'].append(self.getpos())


if __name__ == '__main__':
    contents = ''

    try:
        if sys.argv[1]:
            opener = FancyURLopener({})
            print('Fetching contents from', sys.argv[1], 'please wait...\n')
            f = opener.open(sys.argv[1])
            contents = str(f.read())
    except IndexError:
        for line in fileinput.input():
            contents += line

    parser = Parser()
    parser.feed(contents)

    for k, v in parser.tags.items():
        if v['start']:
            start = len(v['start'])
            diff = start - len(v['end'])
            if diff == 0:
                print('{0:20}: {1:4}'.format(k, start))
            elif diff > 0:
                print('{0:20}: {1:4} +{2} unbalanced starttag'
                      .format(k, start, diff))
            else:
                print('{0:20}: {1:4} {2} unbalanced endtag'
                      .format(k, start, diff))
