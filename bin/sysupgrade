#!/bin/sh

# sysupgrade
# Do a system upgrade, clean package cache and reboot/shutdown/return

# Copyright (c) 2018-2023 Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# SPDX-License-Identifier: ISC

_usage() {
    echo 'usage: sysupgrade <option> [-y]'
    echo
    echo Do a system upgrade, clean package cache and
    echo reboot / shutdown / return to shell.
    echo
    echo Usable on:
    echo '* Archlinux (with pacman and opt. paccache)'
    echo '* Debian GNU/Linux (with dpkg/apt)'
    echo
    echo 'Options:'
    echo '  -d   download packages without installing them'
    echo '  -n   download/install packages and clean cache '
    echo '  -R   like -n but reboot when done'
    echo '  -H   like -n but power off when done'
    echo '  -h   show this help information'
    echo
    echo 'Archlinux only options:'
    echo '  -o   show orphan packages'
    echo
    echo Add -y as 2nd argument to OK installing updates without prompting
}

_countdown() {
    echo
    for i in 4 3 2 1; do
        printf '\r%s in %d secs   ' "$1" $i
        sleep 1
    done
    printf '\r%s now          \n' "$1"
}
_cecho() {
    _colnum="$1"
    shift
    echo "$(tput setaf "$_colnum")$*$(tput op; tput sgr0)"
}

_halt() {
    _countdown "power off"
    $_dbpf $_sudo halt -p || return $?
}
_reboot() {
    _countdown "rebooting"
    $_dbpf $_sudo reboot || return $?
}
_update() {
    case $_OS in
        archlinux) _update_archlinux "$1"; return $? ;;
        debian) _update_debian "$1"; return $? ;;
        *) echo Unknown \$_OS; return 1 ;;
    esac
}

_update_archlinux() {
    _uparg="$1"

    # sync package database with mirror and download packages
    if ping -c1 bing.com >/dev/null; then
        _cecho 2 Downloading upgradeable packages without installing
        _cecho 3 "$_sudo" 'pacman -Syuw --noconfirm'
        $_dbpf $_sudo pacman -Syuw --noconfirm || return $?
    else
        _cecho 1 "NO INTERNET CONNECTION, can't download packages"
    fi

    # install packages unless -d is given
    if test -z "$_uparg"; then
        _cecho 3 "$_sudo" 'pacman -Su' "$_yes"
        $_dbpf $_sudo pacman -Su $_yes || return $?
        if command -v paccache >/dev/null; then
            _cecho 3 "$_sudo" 'paccache -rv'
            $_dbpf $_sudo paccache -rv
        else
            _cecho 4 "Install 'pacman-contrib' to clean package cache"
        fi
    fi
}

_update_debian() {
    _uparg="$1"

    # sync package database with mirror and download packages
    if ping -c1 bing.com >/dev/null; then
        _cecho 2 Downloading upgradeable packages without installing
        _cecho 3 "$_sudo" 'apt update'
        $_dbpf $_sudo apt update || return $?
        _cecho 3 "$_sudo" 'apt upgrade --download-only'
        $_dbpf $_sudo apt upgrade --download-only || return $?
    else
        _cecho 1 "NO INTERNET CONNECTION, can't download packages"
    fi

    # install packages unless -d is given
    if test -z "$_uparg"; then
        _cecho 3 "$_sudo" 'apt upgrade --no-download --ignore-missing' "$_yes"
        $_dbpf $_sudo apt upgrade --no-download --ignore-missing $_yes || return $?
        _cecho 3 "$_sudo" 'apt autoclean'
        $_dbpf $_sudo apt autoclean
    fi
}

_archlinux_only() {
    if test "$_OS" = 'archlinux'; then
        return 0
    else
        _cecho 1 "This option is only available for Archlinux"
        return 38
    fi
}

_main() {
    # debug prefix, set to 'echo DRYRUN:' here to dry-run commands
    _dbpf=''

    # sudo prefix - wrap sudo if not root
    _sudo=''
    if test "$(whoami)" != "root"; then
        _sudo=sudo
    fi

    # check OS distribution
    _etc_issue="$(cat /etc/issue)"
    case $_etc_issue in
        'Arch Linux'*) _OS=archlinux ;;
        'Debian GNU/Linux'*) _OS=debian ;;
        *) echo Unknown operating system.; return 1;;
    esac

    # use --yes or --noconfirm on install step (or not)
    _yes=''
    if test "$2" = '-y'; then
        case $_OS in
            archlinux) _yes='--noconfirm' ;;
            debian) _yes='--yes' ;;
        esac
    fi

    case $1 in
        -H) _update && _halt; return $? ;;
        -R) _update && _reboot; return $? ;;
        -n) _update; return $? ;;
        -d) _update -d; return $? ;;
        -o) _archlinux_only && $_dbpf pacman -Qtdq; return $? ;;
        '' | -h | --help) _usage; return 0 ;;
        *)
            echo "error: unknown option"
            echo
            _usage
            return 1
            ;;
    esac
}

_main "$@"
