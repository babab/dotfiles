#!/bin/sh

# sysupgrade
# Do a system upgrade, clean package cache and reboot/shutdown/return

# Copyright (c) 2018-2023 Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# SPDX-License-Identifier: ISC

_countdown() {
    echo
    for i in 4 3 2 1; do
        printf '\r%s in %d secs   ' "$1" $i
        sleep 1
    done
    printf '\r%s now          \n' "$1"
}
_cecho() {
    _colnum="$1"
    shift
    echo "$(tput setaf "$_colnum")$*$(tput op; tput sgr0)"
}

_halt() {
    _countdown "power off"
    $_dbpf $_sudo halt -p || return $?
}
_reboot() {
    _countdown "rebooting"
    $_dbpf $_sudo reboot || return $?
}
_update() {
    _etc_issue="$(cat /etc/issue)"
    case $_etc_issue in
        'Arch Linux'*) _update_archlinux; return $? ;;
        *) echo Unknown operating system.; return 1;;
    esac
}

_update_archlinux() {
    if ping -c1 bing.com >/dev/null; then
        _cecho 2 Internet connection is available
        _cecho 2 Downloading upgradeable packages without installing
        _cecho 3 "$_sudo" 'pacman -Syuw --noconfirm > /dev/null'
        $_dbpf $_sudo pacman -Syuw --noconfirm >/dev/null || return $?
        if command -v paru >/dev/null; then
            _paruQum="$(paru -Qum)"
            if test -n "$_paruQum"; then
                _cecho 4 'AUR packages / that can be upgraded manually:'
                _cecho 3 'paru -Qum'
                echo "$_paruQum"
            else
                _cecho 4 'No AUR package upgrades available.'
            fi
        else
            _cecho 4 "Install 'paru' to show AUR update candidates"
        fi
    else
        _cecho 1 "NO INTERNET CONNECTION, can't download packages"
    fi
    _cecho 3 "$_sudo" 'pacman -Su' "$_yes"
    $_dbpf $_sudo pacman -Su $_yes || return $?
    if command -v paccache >/dev/null; then
        _cecho 3 "$_sudo" 'paccache -rv'
        $_dbpf $_sudo paccache -rv
    else
        _cecho 4 "Install 'pacman-contrib' to clean package cache"
    fi
}

_main() {
    # debug prefix, set to 'echo DRYRUN:' to dry-run commands
    _dbpf=''

    # sudo prefix - wrap sudo if not root
    _sudo=''
    if test "$(whoami)" != "root"; then
        _sudo=sudo
    fi

    # use --noconfirm or not on install step
    _yes=''
    if test "$2" = '-y'; then
        _yes='--noconfirm'
    fi

    case $1 in
        halt | shutdown) _update && _halt; return $? ;;
        reboot) _update && _reboot; return $? ;;
        return) _update; return $? ;;
        *)
            echo 'usage: sysupgrade <action> [-y]'
            echo
            echo Do a system upgrade, clean package cache and
            echo reboot / shutdown / return to shell.
            echo
            echo 'Actions:'
            echo '  return     return to shell'
            echo '  reboot     reboot'
            echo '  halt       power off'
            echo '  shutdown   power off (alias for halt)'
            return 1
            ;;
    esac
}

_main "$@"
