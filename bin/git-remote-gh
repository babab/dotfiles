#!/bin/sh

# Copyright (c) 2023  Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# SPDX-License-Identifier: ISC

_usage() {
    echo 'usage: git-remote-gh [-r] <user/repo> [<remote>] [<branch>]'
    echo '       git-remote-gh -[r]c <user/repo>'
    echo '       git-remote-gh -v'
    echo '       git-remote-gh -h | --help'
    echo
    echo 'Options:'
    echo '-r               do not use a different push url (readonly)'
    echo '-c               clone repo; before configuring push url '
    echo '-h, --help       show this help information'
    echo '-v               show configured remotes'
    echo
    echo 'Clone or configure remotes (of) a Github repo with favourable urls'
    echo '(using https for fetch / ssh for push by default)'
    echo
    echo This configuration makes it possible to always fetch and pull
    echo changes from public repositories without an ssh-agent or typing
    echo passwords. It also sets the upstream remote tracking branch
    echo without pushing any data. This is well suited for public repos.
    echo
    echo "If <remote> is not specified, it will default to 'origin.'"
    echo "If <branch> is not specified, it will default to the name of"
    echo "the current local branch (git branch --show-current)."
    echo
    echo "Tip: add a git alias 'gh' if you use this often:"
    echo '    git config --global alias.gh remote-gh'
}

_set_push_url() {
    echo '$ git remote set-url --push' "${2} git@github.com:${1}.git"
    git remote set-url --push "${2}" "git@github.com:${1}.git"
}

# states
_sshpushurl=yes
_clone=no
_hasflags=no

# check for -r and -c flags and shift arguments accordingly
case $1 in
    -*) _hasflags=yes ;;
esac
while [ "$_hasflags" = 'yes' ]; do
    case $1 in
        # loop through these behaviour modifiers
        -r) _sshpushurl=no ; shift ;;
        -c) _clone=yes ; shift ;;
        -rc) _sshpushurl=no _clone=yes; shift ;;
        -cr) _sshpushurl=no _clone=yes; shift ;;

        # stops script prematurely if found
        -h*) _usage ; exit 0 ;;
        --h*) _usage ; exit 0 ;;
        -v) git remote --verbose ; exit 0 ;;
        -*)
            echo error: invalid option "$1"
            echo for help information see git-remote-gh -h
            exit 1
            ;;

        # break out of while loop
        *) _hasflags=no ;;
    esac
done

# check positonal arguments
case $1 in
    '') _usage ; exit 0 ;;
    *'/'*) ;; # valid, proceed
    *)
        echo error: invalid argument "$1"
        echo argument must contain a "'/'", to denote user/project
        echo for help information see git-remote-gh -h
        exit 1
        ;;
esac

# we now know that $1 must be user/repo
arg_ident="$1"


# clone behaviour ############################################################
if [ $_clone = 'yes' ]; then
    _folder="$(echo "$arg_ident" | sed 's|^.*/||')"
    echo "t=$_folder"
    if test -d "$_folder"; then
        echo error: "'$_folder'" already exists
        exit 3
    fi
    echo '$ 'git clone "'https://github.com/${arg_ident}.git'"
    git clone "https://github.com/${arg_ident}.git"

    echo cd "$_folder"
    cd "$_folder"

    # Configure push url
    if [ $_sshpushurl = 'yes' ]; then
        _set_push_url "$_arg_ident" origin
    fi
    exit 0
fi


# regular behaviour ##########################################################

# Use remote name as argumented or use default
arg_remote="$2"
test -z "$2" && arg_remote=origin

# Use remote branch name as argumented or use same as local
arg_branch="$3"
test -z "$3" && arg_branch="$(git branch --show-current)"
err=$?
if [ $err -ne 0 ]; then
    echo error: git branch exited with error number $err
    exit 1
fi

# Handle error when no valid repository can be found.
remotesfound="$(git remote 2>&1)"
if [ $? -ne 0 ]; then
    echo '$ git remote'
    echo "${remotesfound}"
    exit 2
fi

case ${remotesfound} in
    *"${arg_remote}"*)
        while true; do
            echo '$ git remote --verbose'
            git remote --verbose
            echo
            echo "Remote ${arg_remote} already exists."
            echo -n "Do you wish to overwrite it? [yes/no] "
            read yn
            case $yn in
                [Yy]*)
                    echo '$ 'git remote remove "${arg_remote}"
                    git remote remove "${arg_remote}"
                    break
                    ;;
                [Nn]*)
                    echo User cancelled. Remote was not configured.
                    exit 0
                    ;;
                *)
                    echo Please answer yes or no.
                    ;;
            esac
        done
        ;;
    *)
        ;;
esac


# Add remote
echo '$ git remote add' "${arg_remote}" "https://github.com/${arg_ident}.git"
git remote add "${arg_remote}" "https://github.com/${arg_ident}.git"

# Configure push url
if [ $_sshpushurl = 'yes' ]; then
    _set_push_url "$_arg_ident" "$_arg_remote"
fi

# Fetch from remote; set tracking branch; show verbose remote info
echo '$ git fetch' "${arg_remote}"
git fetch "${arg_remote}"
echo '$ git branch -u' "${arg_remote}/${arg_branch}"
git branch -u "${arg_remote}/${arg_branch}"
echo '$ git remote --verbose'
git remote --verbose
