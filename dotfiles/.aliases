# vim:set ft=sh:

## Default overrides #########################################################

alias ag='ag --hidden'


## Listing directories #######################################################

if [ "$(uname)" = 'OpenBSD' ]; then
    alias la='colorls -FAG'
    alias ll='colorls -FlhG'
    alias lla='colorls -FlhAG'
    alias ls='colorls -FG'
else
    alias la='ls -FA --color=auto'
    ll() {
        ls -Flh  --color=always "$@" | less -iFXRS
    }
    lla() {
        ls -FlhA --color=always "$@" | less -iFXRS
    }
    alias ls='ls -F  --color=auto'
fi


### Changing directories #####################################################

alias cdp='cd -P' # Use real path instead of symbolic links
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

mcd() {
    test -n "$1" || return 1
    mkdir -p "$1" && cd "$1" || return $?
}

# Projectpad aliases, see: http://github.com/babab/projectpad
alias g='cd `projectpad get`'
alias s='projectpad set && cd `projectpad get` && projectpad add'

if [ "${HOST}" != "vml" ]; then
    export PROJECTPAD_SYMLINK=~/p
    alias gg="cd ${PROJECTPAD_SYMLINK}"
fi

# Open thunar or explorer file browser in current directory
case "$(uname -s)" in
    CYGWIN*|MINGW32*|MSYS*|MINGW*) alias b='explorer.exe .' ;;
    *) alias b='thunar .' ;;
    # TODO: use xdg-open
esac


### Inspect commands, functions and aliases ##################################

what() {
    # Try to standardize usage of `command` and `which` shell builtins
    # in different shells, especially when inspecting functions
    test "$1" || return 1
    _cmdres="$(command -V "$1")"
    _cmderr=$?
    case $_cmdres in
        *'is a shell function from'*)
            _fileloc="$(echo $_cmdres | sed 's/^.*is a shell function from //')"
            echo "$_cmdres"
            echo
            echo "FUNCTION DEFINITION:"
            which "$1"
            echo
            echo "Use 'viwhat $1' to edit the function definition or use:"
            echo "${EDITOR-vi} '$_fileloc'"
            ;;
        *'not found')
            echo "$_cmdres"
            ;;
        *' is a shell builtin')
            echo "$_cmdres"
            echo Cannot quickly edit this type, returning status code 1
            return 1
            ;;
        *' is an alias for '*)
            echo "$_cmdres"
            echo Cannot quickly edit this type, returning status code 1
            return 1
            ;;
        *)
            echo "$_cmdres"
            echo "Use 'viwhat $1' to edit the file or use:"
            echo "${EDITOR-vi} '$(command -v "$1")'"
            ;;
    esac
    return $_cmderr
}
# alias which="echo use 'what' instead of 'which'"


### SSH aliases ##############################################################
alias byessh='ssh-add -D; ps -p $(cat ~/.ssh/agent/pid) | grep ssh-agent && kill $(cat ~/.ssh/agent/pid) && sleep 2 && exit'
alias sshagent='. ~/dotfiles/sources/eval-ssh-agent'
# alias sshsockstunnel='ssh -C2qTnN -D 8080 hostname'


### Git aliases ##############################################################

# Improved git status command
# I use 'll' for directory listings and check on git status often.
# 'kk' is right next to 'll' and very quick to type.
kk() {
    # Handle error when no valid repository can be found. If in a repo,
    # get first 2 lines of git status output to see branch and upstream
    # branch names
    _gitstatus="$(git status)"
    if [ $? -eq 128 ]; then
        echo "$_gitstatus"
        return 128
    fi
    echo "$_gitstatus" | head -2

    if [ "$PWD" = "$HOME/dotfiles/dotfiles" ]; then
        echo "untracked files are filtered when PWD is $PWD"
        git status --short --untracked-files=no
    elif [ "$PWD" = "$HOME/dotfiles/bin" ]; then
        echo "filtered all files that are outside of $PWD"
        git status --short | grep -v '../'
    else
        git status --short $*
    fi
}
alias kl='echo git diff && git diff'
alias lk='echo git diff --cached && git diff --cached'

# git-svn aliases with 'auto' stashing
gsvnup() {
    if [ $(git stash) = "No local changes to save" ]; then
        stash=0
    else
        stash=1
    fi

    git svn rebase

    if [ ${stash} -eq 1 ]; then
        stash=0
        git stash pop
    fi
}
gsvndcommit() {
    if [ $(git stash) = "No local changes to save" ]; then
        stash=0
    else
        stash=1
    fi

    git svn dcommit

    if [ ${stash} -eq 1 ]; then
        stash=0
        git stash pop
    fi
}


### Vim / Emacs / Spacemacs / Text editing ###################################

alias todo='vim ~/TODO.otl'
alias todoview='vim -R ~/TODO.otl'
alias trailing_whitespace_prune="perl -pi -e 's/ +$//' **/*"
alias view='vim -R'

# Wrapper for opening (and protecting) your last vim session
svim() {
    if [ -f "/tmp/${USER}.session.vim" ]; then
        if [ -f "/tmp/${USER}.svim.lock" ]; then
            echo Vim session already started
        else
            touch /tmp/${USER}.svim.lock
            vim -S /tmp/${USER}.session.vim
            rm /tmp/${USER}.svim.lock
        fi
    else
        echo No .session.vim file found
    fi
}

# Quickly edit files found by ack
viack() {
    if [ $1 ]; then
        vim -p -- $(ack -l $*)
    fi
}
# Quickly edit files found by ag
viag() {
    if test -n "$1"; then
        vim -p -- $(ag  --hidden -l "$@")
    fi
}
# Quickly edit files found by grep
vigrep() {
    if [ $1 ]; then
        vim -p -- $(grep -l -R "$*" .)
    fi
}

# Quickly edit scripts whatever their location may be
viwhich() {
    if [ $1 ]; then
        vim $(which $1)
    fi
}

# Quickly edit scripts, functions or aliases whatever their location may be
# EXPERIMENTAL
viwhat() {
    _whatres="$(what "$1")"
    _err=$?

    if [ $_err -eq 0 ]; then
        editcmd=$(echo "$_whatres" | tail -1)
        echo $editcmd
        eval $editcmd
    else
        echo $_whatres
    fi
    return $_err
}


### Python aliases ###########################################################
#
# WORKFLOW:
# envmake    - create a venv in a new dir .virtualenv with current `python`
# envinit    - activate/enter the virtual environment
# envtest    - show information about which python, venv and pkgs are used
# ...        - work on project
# deactivate - deactivate/leave the virtual environment

alias envinit='source .virtualenv/bin/activate'
alias envmake2='virtualenv2 --no-site-packages .virtualenv'
alias envmake='python -m venv .virtualenv'
alias envfind='find . | grep bin/activate$'
alias envbins='ls "$VIRTUAL_ENV"/bin'

# OTHER:

alias blackfmt='black -l 79 -S'
alias pipinstall='python3 -m pip install --user'
alias pipuninstall='python3 -m pip uninstall'
pi() {
    # start an interactive python session with bpython
    filename="$1"
    if [ -z "$filename" ]; then
        bpython
    else
        shift
        bpython -i $filename $*
    fi
}


### PHP / General webdevelopment #############################################
alias runphpserver='php -S 127.0.0.1:8080'
alias phpcs="phpcs --standard=$HOME/dotfiles/standards/babab-phpcs/ruleset.xml"
phpmd() {
    phpmd "$1" "text" "$HOME/dotfiles/standards/babab-phpmd/ruleset.xml"
}

codecept_alias_init() {
    alias codecept="$PWD/vendor/bin/codecept"
}

# TypeScript
alias tsc_all='tsc *.ts'
alias tsc_auto='tsc *.ts --watch'


### Misc aliases #############################################################

alias addpgit='git remote set-url "$(git remote | head -1)" --add --push pgit:$(basename "$(pwd -P)").git'
alias completely='docker run --rm -it --user $(id -u):$(id -g) --volume "$PWD:/app" dannyben/completely'
alias magick_ico='magick convert icon.png -define icon:auto-resize=256,128,64,48,32,16 icon.ico'
alias make7z='7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on'
alias pacmir='reflector --age 2 --country nl --latest 5 --sort score | tee /tmp/mirrorlist'
alias pdf_combine='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=combined.pdf'
alias pipU='python -m pip install --upgrade pip'
alias pping='nc -zv'
alias rm_docker_images='docker rmi $(docker images -q)'
alias rm_docker_ps='docker rm $(docker ps -qa)'
alias rm_vimsession='find . -name ".session.vim" | xargs /bin/rm -f'
alias runmailserver='python -m smtpd -n -c DebuggingServer localhost:1025'
alias sys='sudo systemctl'
alias tmuxa='tmux new -s main -A'
alias ytd='yt-dlp --no-check-certificates --compat-options format-sort --no-playlist'
alias ytdpl='yt-dlp --no-check-certificates --compat-options format-sort'

hypo_upload() {
    curl --upload-file "$1" https://cloud.babab.nl/hypo/ #2>/dev/null
}

if [ -f $HOME/.aliases_local ]; then
    . $HOME/.aliases_local
fi
